
cmake_minimum_required(VERSION 3.10 FATAL_ERROR)

project(OpenCMISS-Setup-Zinc LANGUAGES C CXX)

cmake_policy(SET CMP0057 NEW)
cmake_policy(SET CMP0054 NEW)

get_property(IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}")

include(ExternalProject)
include(Functions)

# Clean up GUI options
mark_as_advanced(QT_QMAKE_EXECUTABLE)
if (APPLE)
    mark_as_advanced(CMAKE_OSX_ARCHITECTURES)
    mark_as_advanced(CMAKE_CODEBLOCKS_EXECUTABLE)
    mark_as_advanced(CMAKE_OSX_DEPLOYMENT_TARGET)
    mark_as_advanced(CMAKE_OSX_SYSROOT)
endif()

set(KNOWN_OPENCMISS_VERSIONS develop)
# Options:
set(OPENCMISS_MODE "develop" CACHE STRING "The branch or tag to setup.  Must be one of: ${KNOWN_OPENCMISS_VERSIONS}")
set(OPENCMISS_BUILD_TYPE Release CACHE STRING "Set the configuration build type.")
set(OPENCMISS_ROOT "" CACHE PATH "The location of the OpenCMISS root directory, must exist!")
set(BUILD_CONFIGS all dependencies)
set(OPENCMISS_SETUP_TYPE "all" CACHE STRING "Define what should be setup.")
set(OPENCMISS_PYTHON_EXECUTABLE "python" CACHE FILEPATH "Set the Python to use.")
set_property(CACHE OPENCMISS_SETUP_TYPE PROPERTY STRINGS ${BUILD_CONFIGS})

# Internalise some variables that don't have any meaning here
set(CMAKE_BUILD_TYPE "Release" CACHE INTERNAL "Internalise CMAKE_BUILD_TYPE")
set(CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}" CACHE INTERNAL "Internalise CMAKE_INSTALL_PREFIX")
if (NOT IS_MULTI_CONFIG)
  set(CMAKE_CONFIGURATION_TYPES ${CMAKE_CONFIGURATION_TYPES} CACHE INTERNAL "Internalise CMAKE_CONFIGURATION_TYPES")
endif()

if (NOT EXISTS ${OPENCMISS_ROOT})
    message(FATAL_ERROR "Location '${OPENCMISS_ROOT}' does not exist.")
endif()

find_package(Git)

if (NOT GITHUB_PROTOCOL)
    get_github_protocol(_GITHUB_PROTOCOL)
endif()
set(GITHUB_PROTOCOL ${_GITHUB_PROTOCOL} CACHE STRING "Set GitHub protocol.")
mark_as_advanced(GITHUB_PROTOCOL)

set(ALL_PROJECTS CMAKE_MODULES)

# load settings for mode
include("Settings-pre")
include("Settings-${OPENCMISS_MODE}")
include("Settings-post")

set(OPENCMISS_CMAKE_MODULES_SOURCE_DIR "${OPENCMISS_ROOT}/src/cmake_modules")
set(OPENCMISS_CMAKE_MODULES_BINARY_DIR "${OPENCMISS_ROOT}/build${SINGLE_BUILD_DIR_LABEL}/cmake_modules")

if (EXISTS ${OPENCMISS_CMAKE_MODULES_SOURCE_DIR}/CMakeLists.txt)
    message(STATUS "CMake modules source files are already present, skipping downloading them.")
    unset(DOWNLOAD_CMAKE_MODULES_CMD)
endif()

set(OPENCMISS_CMAKE_MODULES_INSTALL_DIR ${OPENCMISS_ROOT}/install)
list(APPEND CMAKE_MODULES_ARGS -DINSTALL_PREFIX=${OPENCMISS_CMAKE_MODULES_INSTALL_DIR})

ExternalProject_Add(setup_cmake_modules
    ${DOWNLOAD_CMAKE_MODULES_CMD}
    SOURCE_DIR "${OPENCMISS_CMAKE_MODULES_SOURCE_DIR}"
    BINARY_DIR "${OPENCMISS_CMAKE_MODULES_BINARY_DIR}"
    CMAKE_COMMAND ${CMAKE_COMMAND}
    CMAKE_ARGS ${SINGLE_BUILD_CONFIG} ${CMAKE_MODULES_ARGS}
    BUILD_COMMAND ""
    INSTALL_COMMAND ${CMAKE_COMMAND} --build . --target install ${MULTICONFIG_BUILD_CONFIG}
)

set(OPENCMISS_CMAKE_MODULE_PATH)
list(APPEND OPENCMISS_CMAKE_MODULE_PATH "${OPENCMISS_CMAKE_MODULES_INSTALL_DIR}/share/cmake/Modules/FindModuleWrappers")
list(APPEND OPENCMISS_CMAKE_MODULE_PATH "${OPENCMISS_CMAKE_MODULES_INSTALL_DIR}/share/cmake/Modules/")
list(APPEND OPENCMISS_CMAKE_MODULE_PATH "${OPENCMISS_CMAKE_MODULES_INSTALL_DIR}/share/cmake/Modules/OpenCMISS")

string(REPLACE ";" "${LIST_SEPARATOR}" OPENCMISS_CMAKE_MODULE_PATH "${OPENCMISS_CMAKE_MODULE_PATH}")


set(PROJECT_ARGS)
list(APPEND PROJECT_ARGS -DOPENCMISS_ROOT=${OPENCMISS_ROOT})
list(APPEND PROJECT_ARGS -DOPENCMISS_CMAKE_MODULE_PATH=${OPENCMISS_CMAKE_MODULE_PATH})
list(APPEND PROJECT_ARGS -DOPENCMISS_MODE=${OPENCMISS_MODE})
list(APPEND PROJECT_ARGS -DOPENCMISS_BUILD_TYPE=${OPENCMISS_BUILD_TYPE})
list(APPEND PROJECT_ARGS -DOPENCMISS_SETUP_TYPE=${OPENCMISS_SETUP_TYPE})
list(APPEND PROJECT_ARGS -DOPENCMISS_PYTHON_EXECUTABLE=${OPENCMISS_PYTHON_EXECUTABLE})

ExternalProject_Add(setup_projects
    DEPENDS setup_cmake_modules
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/projects
    BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/projects
    LIST_SEPARATOR ${LIST_SEPARATOR}
    CMAKE_COMMAND ${CMAKE_COMMAND}
    CMAKE_ARGS ${SINGLE_BUILD_CONFIG} ${PROJECT_ARGS}
    BUILD_COMMAND ${CMAKE_COMMAND} --build . ${MULTICONFIG_BUILD_CONFIG}
    INSTALL_COMMAND ""
)
