
cmake_minimum_required(VERSION 3.15 FATAL_ERROR)

project(OpenCMISS-Projects LANGUAGES C CXX)

cmake_policy(SET CMP0057 NEW)
cmake_policy(SET CMP0054 NEW)

get_property(IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/..")
list(APPEND CMAKE_MODULE_PATH ${OPENCMISS_CMAKE_MODULE_PATH})

include(ExternalProject)
include(ProjectFunctions)
include(ProjectMacros)
include(Functions)

find_package(Git)
find_package(SWIG)
find_package(Python3 COMPONENTS Interpreter Development)

if (NOT GITHUB_PROTOCOL)
    get_github_protocol(_GITHUB_PROTOCOL)
endif()
set(GITHUB_PROTOCOL ${_GITHUB_PROTOCOL} CACHE STRING "Set GitHub protocol.")
mark_as_advanced(GITHUB_PROTOCOL)


set(OPENCMISS_PROJECTS ZINC SWIGZINC)
set(UTILITIES_PROJECTS GTEST)
set(DEPENDENCY_PROJECTS BLAS LAPACK BZIP2 FIELDML-API GTEST HDF5 LIBXML2 SZIP ZLIB FREETYPE FTGL GDCM-ABI GLEW IMAGEMAGICK ITK JPEG
    NETGEN OPTPP PNG TIFF)
set(ALL_PROJECTS ${OPENCMISS_PROJECTS} ${DEPENDENCY_PROJECTS} ${UTILITIES_PROJECTS})

# load settings for mode
include("Settings-pre")
include("Settings-${OPENCMISS_MODE}")
if (EXISTS "${OPENCMISS_USER_SETTINGS_FILE}")
  include("${OPENCMISS_USER_SETTINGS_FILE}")
endif()
include("Settings-post")

string(REPLACE ";" "${LIST_SEPARATOR}" PROJECT_CMAKE_MODULE_PATH "${OPENCMISS_CMAKE_MODULE_PATH}")
set(_INSTALL_PREFIX ${OPENCMISS_ROOT}/install)

set(CONTEXT_OPENCMISS_MODULE_PATH)
foreach(_MODULE_PATH ${OPENCMISS_CMAKE_MODULE_PATH})
    file(RELATIVE_PATH _REL_OPENCMISS_MODULES_PATH "${_INSTALL_PREFIX}" "${_MODULE_PATH}")
    list(APPEND CONTEXT_OPENCMISS_MODULE_PATH "\${_OPENCMISS_DEPENDENCIES_IMPORT_PREFIX}/${_REL_OPENCMISS_MODULES_PATH}")
endforeach()

# Create and install opencmissdependencies-config.cmake
set(OPENCMISS_DEPENDENCIES_CONFIG ${CMAKE_CURRENT_BINARY_DIR}/opencmissdependencies-config.cmake)
configure_file(opencmissdependencies-config.in.cmake ${OPENCMISS_DEPENDENCIES_CONFIG} @ONLY)
configure_file(${OPENCMISS_DEPENDENCIES_CONFIG} ${_INSTALL_PREFIX}/opencmissdependencies-config.cmake @ONLY)

if (SWIG_FOUND AND Python3_Interpreter_FOUND AND Python3_Development_FOUND)
    set(ZINC_WITH_Python_BINDINGS TRUE)
endif()
if (ZLIB IN_LIST ALL_PROJECTS)
    set(ZLIB_FWD_DEPS
        SCOTCH LIBXML2 HDF5
        IRON CSIM LLVM PNG IMAGEMAGICK ITK
        TIFF GDCM-ABI FREETYPE ZINC)
    add_project(ZLIB)
endif()

if (LIBXML2 IN_LIST ALL_PROJECTS)
    set(LIBXML2_FWD_DEPS CSIM LLVM FIELDML-API CELLML LIBCELLML ITK)
    foreach(dependency ZLIB)
        if (LIBXML2_WITH_${dependency})
            set(LIBXML2_USE_${dependency} ON)
        else ()
            set(LIBXML2_USE_${dependency} OFF)
        endif ()
    endforeach()
    add_project(LIBXML2
        ZLIB_FIND_SYSTEM=${ZLIB_FIND_SYSTEM}
        WITH_ZLIB=${LIBXML2_USE_ZLIB}
        ZLIB_VERSION=${ZLIB_VERSION}
    )
endif()

if (BZIP2 IN_LIST ALL_PROJECTS)
    set(BZIP2_FWD_DEPS SCOTCH GDCM-ABI IMAGEMAGICK FREETYPE ZINC)
    add_project(BZIP2)
endif ()

if (GTEST IN_LIST ALL_PROJECTS)
    set(GTEST_FWD_DEPS LLVM CSIM ZINC)
    add_project(GTEST
        BUILD_TESTS=OFF
        gtest_force_shared_crt=YES
    )
endif ()

if (HDF5 IN_LIST ALL_PROJECTS)
    if (SZIP IN_LIST ALL_PROJECTS)
        set(SZIP_FWD_DEPS HDF5)
        add_project(SZIP)
    endif ()

    set(HDF5_FWD_DEPS FIELDML-API ITK)
    foreach(dependency SZIP;ZLIB)
        if (HDF5_WITH_${dependency})
            set(HDF5_USE_${dependency} ON)
        else ()
            set(HDF5_USE_${dependency} OFF)
        endif ()
    endforeach()

    add_project(HDF5
        BUILD_TESTS=OFF
        OCMS_BUILD=ON
        WITH_SZIP=${HDF5_USE_SZIP}
        SZIP_FIND_SYSTEM=OFF
        SZIP_VERSION=${SZIP_VERSION}
        ZLIB_FIND_SYSTEM=${ZLIB_FIND_SYSTEM}
        WITH_ZLIB=${HDF5_USE_ZLIB}
        ZLIB_VERSION=${ZLIB_VERSION}
        HDF5_BUILD_FORTRAN=OFF
        HDF5_BUILD_EXAMPLES=OFF
    )
endif()

if (FIELDML-API IN_LIST ALL_PROJECTS)
    set(FIELDML-API_FWD_DEPS ZINC IRON)
    if (FIELDML-API_WITH_HDF5)
        set(FIELDML-API_USE_HDF5 ON)
    else ()
        set(FIELDML-API_USE_HDF5 OFF)
    endif ()
    add_project(FIELDML-API
        BUILD_TESTS=OFF
        LIBXML2_FIND_SYSTEM=${LIBXML2_FIND_SYSTEM}
        LIBXML2_VERSION=${LIBXML2_VERSION}
        USE_HDF5=${FIELDML-API_USE_HDF5}
        HDF5_FIND_SYSTEM=${HDF5_FIND_SYSTEM}
        HDF5_VERSION=${HDF5_VERSION}
        HDF5_WITH_MPI=OFF
        HDF5_BUILD_TOOLS=OFF
        JAVA_BINDINGS=OFF
        FORTRAN_BINDINGS=OFF
    )
endif ()

if (JPEG IN_LIST ALL_PROJECTS)
    set(JPEG_FWD_DEPS ZINC TIFF GDCM-ABI IMAGEMAGICK ITK)
    add_project(JPEG
        JPEG_BUILD_CJPEG=OFF
        JPEG_BUILD_DJPEG=OFF
        JPEG_BUILD_JPEGTRAN=OFF
        JPEG_BUILD_RDJPGCOM=OFF
        JPEG_BUILD_WRJPGCOM=OFF
    )
endif ()

if (NETGEN IN_LIST ALL_PROJECTS)
    set(NETGEN_FWD_DEPS ZINC)
    add_project(NETGEN
        NETGEN_BUILD_TYPE=${OPENCMISS_BUILD_TYPE}
        NETGEN_INSTALL_PREFIX=${_INSTALL_PREFIX}
    )
endif ()

if (FREETYPE IN_LIST ALL_PROJECTS)
    set(FREETYPE_FWD_DEPS FTGL)
    add_project(FREETYPE
        FREETYPE_USE_ZLIB=ON
        FREETYPE_USE_BZIP2=ON
        ZLIB_FIND_SYSTEM=${ZLIB_FIND_SYSTEM}
        ZLIB_VERSION=${ZLIB_VERSION}
        BZIP2_FIND_SYSTEM=${BZIP2_FIND_SYSTEM}
        BZIP2_VERSION=${BZIP2_VERSION}
    )
endif ()

if (FTGL IN_LIST ALL_PROJECTS)
      set(FTGL_FWD_DEPS ZINC)
      add_project(FTGL
          FREETYPE_FIND_SYSTEM=${FREETYPE_FIND_SYSTEM}
          FREETYPE_VERSION=${FREETYPE_VERSION}
      )
endif ()

if (GLEW IN_LIST ALL_PROJECTS)
    set(GLEW_FWD_DEPS ZINC)
    add_project(GLEW)
endif ()

if (OPTPP IN_LIST ALL_PROJECTS)
    set(OPTPP_FWD_DEPS ZINC)
    foreach(dependency BLAS)
        if(OPTPP_WITH_${dependency})
            set(OPTPP_USE_${dependency} ON)
        else()
            set(OPTPP_USE_${dependency} OFF)
        endif()
    endforeach()

    add_project(OPTPP
        USE_EXTERNAL_BLAS=${OPTPP_USE_BLAS}
        ${BLA_VENDOR_CONFIG}
        BLAS_FIND_SYSTEM=${BLAS_FIND_SYSTEM}
        BLAS_VERSION=${LAPACK_VERSION}
        LAPACK_FIND_SYSTEM=${LAPACK_FIND_SYSTEM}
        LAPACK_VERSION=${LAPACK_VERSION}
    )
endif ()

if (PNG IN_LIST ALL_PROJECTS)
    set(PNG_FWD_DEPS ZINC ITK IMAGEMAGICK)
    add_project(PNG
        PNG_NO_CONSOLE_IO=OFF
        PNG_NO_STDIO=OFF
        PNG_SHARED=OFF
        ZLIB_FIND_SYSTEM=${ZLIB_FIND_SYSTEM}
        ZLIB_VERSION=${ZLIB_VERSION}
    )
endif ()

if (TIFF IN_LIST ALL_PROJECTS)
      set(TIFF_FWD_DEPS ZINC ITK IMAGEMAGICK)
      add_project(TIFF
          TIFF_BUILD_TOOLS=OFF
          ZLIB_FIND_SYSTEM=${ZLIB_FIND_SYSTEM}
          ZLIB_VERSION=${ZLIB_VERSION}
          PNG_FIND_SYSTEM=${PNG_FIND_SYSTEM}
          PNG_VERSION=${PNG_VERSION}
          JPEG_FIND_SYSTEM=${JPEG_FIND_SYSTEM}
          JPEG_VERSION=${JPEG_VERSION}
      )
endif ()

if (GDCM-ABI IN_LIST ALL_PROJECTS)
    if (NOT GDCM-ABI_FOUND)
        set(GDCM-ABI_FWD_DEPS ZINC ITK IMAGEMAGICK)
        # Make EXPAT and UUID platform dependent?
        if (MSVC)
            set(GDCM_USE_SYSTEM_EXPAT OFF)
        else ()
            set(GDCM_USE_SYSTEM_EXPAT OFF)
        endif ()
        add_project(GDCM-ABI
            GDCM_INSTALL_PACKAGE_DIR=${COMMON_PACKAGE_CONFIG_DIR}GDCM-ABI
            ZLIB_FIND_SYSTEM=${ZLIB_FIND_SYSTEM}
            ZLIB_VERSION=${ZLIB_VERSION}
            GDCM_USE_SYSTEM_ZLIB=ON
            GDCM_USE_SYSTEM_EXPAT=${GDCM_USE_SYSTEM_EXPAT}
        )
    endif ()
endif ()

if (IMAGEMAGICK IN_LIST ALL_PROJECTS)
      set(IMAGEMAGICK_FWD_DEPS ZINC)
      add_project(IMAGEMAGICK
          IMAGEMAGICK_WITH_MAGICKPP=OFF
          ZLIB_FIND_SYSTEM=${ZLIB_FIND_SYSTEM}
          ZLIB_VERSION=${ZLIB_VERSION}
          LIBXML2_FIND_SYSTEM=${LIBXML2_FIND_SYSTEM}
          LIBXML2_VERSION=${LIBXML2_VERSION}
          BZIP2_FIND_SYSTEM=${BZIP2_FIND_SYSTEM}
          BZIP2_VERSION=${BZIP2_VERSION}
          GDCM-ABI_FIND_SYSTEM=${GDCM-ABI_FIND_SYSTEM}
          GDCM-ABI_VERSION=${GDCM-ABI_VERSION}
          TIFF_FIND_SYSTEM=${TIFF_FIND_SYSTEM}
          TIFF_VERSION=${TIFF_VERSION}
          JPEG_FIND_SYSTEM=${JPEG_FIND_SYSTEM}
          JPEG_VERSION=${JPEG_VERSION}
          PNG_FIND_SYSTEM=${PNG_FIND_SYSTEM}
          PNG_VERSION=${PNG_VERSION}
      )
endif ()

if (ITK IN_LIST ALL_PROJECTS)
    if (MSVC AND HDF5 IN_LIST ALL_PROJECTS)
        set(HDF5_SETTINGS ITK_USE_SYSTEM_HDF5=ON HDF5_VERSION=${HDF5_VERSION} HDF5_ENABLE_PARALLEL=OFF)
    endif ()
    set(ITK_FWD_DEPS ZINC)
    add_project(ITK
        ITK_BUILD_TESTING=OFF
        ITK_BUILD_EXAMPLES=OFF
        ITK_INSTALL_PACKAGE_DIR=${COMMON_PACKAGE_CONFIG_DIR}ITK
        ${HDF5_SETTINGS}
        ITK_USE_SYSTEM_PNG=ON
        ITK_USE_SYSTEM_TIFF=OFF # ITK now uses bigtiff, which is different from tiff
        ITK_USE_SYSTEM_JPEG=ON
        ITK_USE_SYSTEM_LIBXML2=ON
        ITK_USE_SYSTEM_ZLIB=ON
        ITK_USE_SYSTEM_GDCM=ON
        ITK_USE_KWSTYLE=OFF
        ZLIB_FIND_SYSTEM=${ZLIB_FIND_SYSTEM}
        ZLIB_VERSION=${ZLIB_VERSION}
        PNG_FIND_SYSTEM=${PNG_FIND_SYSTEM}
        PNG_VERSION=${PNG_VERSION}
        JPEG_FIND_SYSTEM=${JPEG_FIND_SYSTEM}
        JPEG_VERSION=${JPEG_VERSION}
        # TIFF_VERSION=${TIFF_VERSION}
        LIBXML2_FIND_SYSTEM=${LIBXML2_FIND_SYSTEM}
        LIBXML2_VERSION=${LIBXML2_VERSION}
        GDCM-ABI_FIND_SYSTEM=${GDCM-ABI_FIND_SYSTEM}
        GDCM-ABI_VERSION=${GDCM-ABI_VERSION}
    )
endif ()

if (ZINC IN_LIST ALL_PROJECTS)
    if (EXISTS "${OPENCMISS_PYTHON_EXECUTABLE}")
        set(_ZINC_PYTHON_EXECUTABLE_CONFIG_PARAMETER "Python_EXECUTABLE=${OPENCMISS_PYTHON_EXECUTABLE}")
    endif ()
    set(ZINC_FWD_DEPS SWIGZINC)
    add_project(ZINC
        ZINC_BUILD_TESTS=${ZINC_BUILD_TESTS}
        ZINC_PACKAGE_CONFIG_DIR=${COMMON_PACKAGE_CONFIG_DIR}ZINC
        OPENCMISSDEPENDENCIES_DIR=${_INSTALL_PREFIX}
    )
    if (ZINC_WITH_Python_BINDINGS)
        add_project(SWIGZINC
            Zinc_DIR=${_INSTALL_PREFIX}/install/${COMMON_PACKAGE_CONFIG_DIR}ZINC
            ${_ZINC_PYTHON_EXECUTABLE_CONFIG_PARAMETER}
        )

    endif()
endif ()
